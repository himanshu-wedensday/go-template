// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlmodels

type Author struct {
	ID        string  `json:"id"`
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Email     *string `json:"email,omitempty"`
	CreatedAt *int    `json:"createdAt,omitempty"`
	DeletedAt *int    `json:"deletedAt,omitempty"`
	UpdatedAt *int    `json:"updatedAt,omitempty"`
}

type AuthorCreateInput struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Email     string `json:"email"`
}

type AuthorDeleteInput struct {
	ID string `json:"id"`
}

type AuthorDeletePayload struct {
	ID string `json:"id"`
}

type AuthorFilter struct {
	Search *string      `json:"search,omitempty"`
	Where  *AuthorWhere `json:"where,omitempty"`
}

type AuthorPagination struct {
	Limit int `json:"limit"`
	Page  int `json:"page"`
}

type AuthorPayload struct {
	Author *Author `json:"author"`
}

type AuthorQueryInput struct {
	ID string `json:"id"`
}

type AuthorUpdateInput struct {
	ID        string  `json:"id"`
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Email     *string `json:"email,omitempty"`
}

type AuthorWhere struct {
	ID        *IDFilter     `json:"id,omitempty"`
	FirstName *StringFilter `json:"firstName,omitempty"`
	LastName  *StringFilter `json:"lastName,omitempty"`
	Email     *StringFilter `json:"email,omitempty"`
	CreatedAt *IntFilter    `json:"createdAt,omitempty"`
	DeletedAt *IntFilter    `json:"deletedAt,omitempty"`
	UpdatedAt *IntFilter    `json:"updatedAt,omitempty"`
	Or        *AuthorWhere  `json:"or,omitempty"`
	And       *AuthorWhere  `json:"and,omitempty"`
}

type AuthorsCreateInput struct {
	Authors []*AuthorCreateInput `json:"authors"`
}

type AuthorsPayload struct {
	Authors []*Author `json:"authors"`
	Total   int       `json:"total"`
}

type BooleanFilter struct {
	IsTrue  *bool `json:"isTrue,omitempty"`
	IsFalse *bool `json:"isFalse,omitempty"`
	IsNull  *bool `json:"isNull,omitempty"`
}

type ChangePasswordResponse struct {
	Ok bool `json:"ok"`
}

type FloatFilter struct {
	EqualTo           *float64  `json:"equalTo,omitempty"`
	NotEqualTo        *float64  `json:"notEqualTo,omitempty"`
	LessThan          *float64  `json:"lessThan,omitempty"`
	LessThanOrEqualTo *float64  `json:"lessThanOrEqualTo,omitempty"`
	MoreThan          *float64  `json:"moreThan,omitempty"`
	MoreThanOrEqualTo *float64  `json:"moreThanOrEqualTo,omitempty"`
	In                []float64 `json:"in,omitempty"`
	NotIn             []float64 `json:"notIn,omitempty"`
}

type IDFilter struct {
	EqualTo    *string  `json:"equalTo,omitempty"`
	NotEqualTo *string  `json:"notEqualTo,omitempty"`
	In         []string `json:"in,omitempty"`
	NotIn      []string `json:"notIn,omitempty"`
}

type IntFilter struct {
	EqualTo           *int  `json:"equalTo,omitempty"`
	NotEqualTo        *int  `json:"notEqualTo,omitempty"`
	LessThan          *int  `json:"lessThan,omitempty"`
	LessThanOrEqualTo *int  `json:"lessThanOrEqualTo,omitempty"`
	MoreThan          *int  `json:"moreThan,omitempty"`
	MoreThanOrEqualTo *int  `json:"moreThanOrEqualTo,omitempty"`
	In                []int `json:"in,omitempty"`
	NotIn             []int `json:"notIn,omitempty"`
}

type LoginResponse struct {
	Token        string `json:"token"`
	RefreshToken string `json:"refreshToken"`
}

type Mutation struct {
}

type Post struct {
	ID        string  `json:"id"`
	Author    *Author `json:"author,omitempty"`
	Post      *string `json:"post,omitempty"`
	CreatedAt *int    `json:"createdAt,omitempty"`
	DeletedAt *int    `json:"deletedAt,omitempty"`
	UpdatedAt *int    `json:"updatedAt,omitempty"`
}

type PostCreateInput struct {
	Post     string `json:"post"`
	AuthorID string `json:"authorId"`
}

type PostDeleteInput struct {
	ID string `json:"id"`
}

type PostDeletePayload struct {
	ID string `json:"id"`
}

type PostQueryInput struct {
	AuthorID int `json:"authorId"`
}

type PostUpdateInput struct {
	ID   string  `json:"id"`
	Post *string `json:"post,omitempty"`
}

type PostsCreateInput struct {
	Posts []*PostsCreateInput `json:"posts"`
}

type PostsFilter struct {
	Search *string     `json:"search,omitempty"`
	Where  *PostsWhere `json:"where,omitempty"`
}

type PostsPagination struct {
	Limit int `json:"limit"`
	Page  int `json:"page"`
}

type PostsPayload struct {
	Posts []*Post `json:"posts"`
	Total int     `json:"total"`
}

type PostsWhere struct {
	ID        *IDFilter    `json:"id,omitempty"`
	Author    *AuthorWhere `json:"author,omitempty"`
	CreatedAt *IntFilter   `json:"createdAt,omitempty"`
	DeletedAt *IntFilter   `json:"deletedAt,omitempty"`
	UpdatedAt *IntFilter   `json:"updatedAt,omitempty"`
	Or        *PostsWhere  `json:"or,omitempty"`
	And       *PostsWhere  `json:"and,omitempty"`
}

type Query struct {
}

type RefreshTokenResponse struct {
	Token string `json:"token"`
}

type Role struct {
	ID          string  `json:"id"`
	AccessLevel int     `json:"accessLevel"`
	Name        string  `json:"name"`
	UpdatedAt   *int    `json:"updatedAt,omitempty"`
	DeletedAt   *int    `json:"deletedAt,omitempty"`
	CreatedAt   *int    `json:"createdAt,omitempty"`
	Users       []*User `json:"users,omitempty"`
}

type RoleCreateInput struct {
	AccessLevel int    `json:"accessLevel"`
	Name        string `json:"name"`
}

type RoleDeletePayload struct {
	ID string `json:"id"`
}

type RoleFilter struct {
	Search *string    `json:"search,omitempty"`
	Where  *RoleWhere `json:"where,omitempty"`
}

type RolePagination struct {
	Limit int `json:"limit"`
	Page  int `json:"page"`
}

type RolePayload struct {
	Role *Role `json:"role"`
}

type RoleUpdateInput struct {
	AccessLevel *int    `json:"accessLevel,omitempty"`
	Name        *string `json:"name,omitempty"`
	UpdatedAt   *int    `json:"updatedAt,omitempty"`
	DeletedAt   *int    `json:"deletedAt,omitempty"`
	CreatedAt   *int    `json:"createdAt,omitempty"`
}

type RoleWhere struct {
	ID          *IDFilter     `json:"id,omitempty"`
	AccessLevel *IntFilter    `json:"accessLevel,omitempty"`
	Name        *StringFilter `json:"name,omitempty"`
	UpdatedAt   *IntFilter    `json:"updatedAt,omitempty"`
	DeletedAt   *IntFilter    `json:"deletedAt,omitempty"`
	CreatedAt   *IntFilter    `json:"createdAt,omitempty"`
	Users       *UserWhere    `json:"users,omitempty"`
	Or          *RoleWhere    `json:"or,omitempty"`
	And         *RoleWhere    `json:"and,omitempty"`
}

type RolesCreateInput struct {
	Roles []*RoleCreateInput `json:"roles"`
}

type RolesDeletePayload struct {
	Ids []string `json:"ids"`
}

type RolesPayload struct {
	Roles []*Role `json:"roles"`
}

type RolesUpdatePayload struct {
	Ok bool `json:"ok"`
}

type StringFilter struct {
	EqualTo            *string  `json:"equalTo,omitempty"`
	NotEqualTo         *string  `json:"notEqualTo,omitempty"`
	In                 []string `json:"in,omitempty"`
	NotIn              []string `json:"notIn,omitempty"`
	StartWith          *string  `json:"startWith,omitempty"`
	NotStartWith       *string  `json:"notStartWith,omitempty"`
	EndWith            *string  `json:"endWith,omitempty"`
	NotEndWith         *string  `json:"notEndWith,omitempty"`
	Contain            *string  `json:"contain,omitempty"`
	NotContain         *string  `json:"notContain,omitempty"`
	StartWithStrict    *string  `json:"startWithStrict,omitempty"`
	NotStartWithStrict *string  `json:"notStartWithStrict,omitempty"`
	EndWithStrict      *string  `json:"endWithStrict,omitempty"`
	NotEndWithStrict   *string  `json:"notEndWithStrict,omitempty"`
	ContainStrict      *string  `json:"containStrict,omitempty"`
	NotContainStrict   *string  `json:"notContainStrict,omitempty"`
}

type Subscription struct {
}

type User struct {
	ID                 string  `json:"id"`
	FirstName          *string `json:"firstName,omitempty"`
	LastName           *string `json:"lastName,omitempty"`
	Username           *string `json:"username,omitempty"`
	Password           *string `json:"password,omitempty"`
	Email              *string `json:"email,omitempty"`
	Mobile             *string `json:"mobile,omitempty"`
	Address            *string `json:"address,omitempty"`
	Active             *bool   `json:"active,omitempty"`
	LastLogin          *int    `json:"lastLogin,omitempty"`
	LastPasswordChange *int    `json:"lastPasswordChange,omitempty"`
	Token              *string `json:"token,omitempty"`
	Role               *Role   `json:"role,omitempty"`
	CreatedAt          *int    `json:"createdAt,omitempty"`
	DeletedAt          *int    `json:"deletedAt,omitempty"`
	UpdatedAt          *int    `json:"updatedAt,omitempty"`
}

type UserCreateInput struct {
	FirstName string  `json:"firstName"`
	LastName  string  `json:"lastName"`
	Username  string  `json:"username"`
	Password  string  `json:"password"`
	Email     string  `json:"email"`
	RoleID    string  `json:"roleId"`
	Mobile    string  `json:"mobile"`
	Address   *string `json:"address,omitempty"`
	Active    *bool   `json:"active,omitempty"`
}

type UserDeletePayload struct {
	ID string `json:"id"`
}

type UserFilter struct {
	Search *string    `json:"search,omitempty"`
	Where  *UserWhere `json:"where,omitempty"`
}

type UserPagination struct {
	Limit int `json:"limit"`
	Page  int `json:"page"`
}

type UserPayload struct {
	User *User `json:"user"`
}

type UserUpdateInput struct {
	ID        string  `json:"id"`
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Mobile    *string `json:"mobile,omitempty"`
	Address   *string `json:"address,omitempty"`
}

type UserWhere struct {
	ID                 *IDFilter      `json:"id,omitempty"`
	FirstName          *StringFilter  `json:"firstName,omitempty"`
	LastName           *StringFilter  `json:"lastName,omitempty"`
	Username           *StringFilter  `json:"username,omitempty"`
	Password           *StringFilter  `json:"password,omitempty"`
	Email              *StringFilter  `json:"email,omitempty"`
	Mobile             *StringFilter  `json:"mobile,omitempty"`
	Address            *StringFilter  `json:"address,omitempty"`
	Active             *BooleanFilter `json:"active,omitempty"`
	LastLogin          *IntFilter     `json:"lastLogin,omitempty"`
	LastPasswordChange *IntFilter     `json:"lastPasswordChange,omitempty"`
	Token              *StringFilter  `json:"token,omitempty"`
	Role               *RoleWhere     `json:"role,omitempty"`
	CreatedAt          *IntFilter     `json:"createdAt,omitempty"`
	DeletedAt          *IntFilter     `json:"deletedAt,omitempty"`
	UpdatedAt          *IntFilter     `json:"updatedAt,omitempty"`
	Or                 *UserWhere     `json:"or,omitempty"`
	And                *UserWhere     `json:"and,omitempty"`
}

type UsersCreateInput struct {
	Users []*UserCreateInput `json:"users"`
}

type UsersPayload struct {
	Users []*User `json:"users"`
	Total int     `json:"total"`
}

type PostPayload struct {
	Post *Post `json:"post"`
}
