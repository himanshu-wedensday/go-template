package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"
	"go-template/daos"
	"go-template/gqlmodels"
	"go-template/pkg/utl/cnvrttogql"
	"go-template/pkg/utl/resultwrapper"

	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, input *gqlmodels.PostQueryInput, pagination *gqlmodels.PostsPagination) (*gqlmodels.PostsPayload, error) {
	var queryMods []qm.QueryMod
	if pagination != nil {
		if pagination.Limit != 0 {
			queryMods = append(queryMods, qm.Limit(pagination.Limit), qm.Offset(pagination.Page*pagination.Limit))
		}
		queryMods = append(queryMods, qm.Where(fmt.Sprintf("author_id = '%d'", input.AuthorID)))
	}
	posts, count, err := daos.FindAllPostsWithCount(queryMods, ctx)
	if err != nil {
		return nil, resultwrapper.ResolverSQLError(err, "data")
	}
	return &gqlmodels.PostsPayload{Total: int(count), Posts: cnvrttogql.PostsToGraphQlPosts(posts, count)}, nil
}
